# -*- coding: utf-8 -*-
"""brest cancer.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/19ul9gGQgFspwbmi0Z0RcMS7KQRd-0XHK
"""

import numpy as np
import pandas as pd
import sklearn.datasets
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import accuracy_score

df= pd.read_csv('/content/data.csv')

print(df)

df.head()

df.describe

"""M = malignant, B = benign, replacing the M with 0 and B with 1"""

df.diagnosis[ df.diagnosis == 'M'] = 0

df.diagnosis[ df.diagnosis == 'B'] = 1

df.head()

df.isnull().sum()   ##checking missing value

df.drop(['id', 'Unnamed: 32'], axis = 1, inplace = True)  ##

df.head()

df.describe()

df.info()

df['diagnosis'].value_counts()

df.groupby('diagnosis').mean()

import seaborn as sns
import matplotlib.pyplot as plt

##Histogram of Each feature
df.hist(bins=10,figsize=(20,20))
plt.show()

"""Seperating the target and feature"""

X = df.drop(columns ='diagnosis', axis=1)
Y = df.diagnosis

Y = Y.astype('int')

print(X)
print(Y)

# train-test split
from sklearn.model_selection import train_test_split
X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size= 0.2, random_state=2)

print(Y_train.shape)



from sklearn.linear_model import LogisticRegression

model = LogisticRegression()

model.fit(X_train, Y_train)

"""accuracy score"""

X_test_prediction = model.predict(X_test)
data_accuracy = accuracy_score(X_test_prediction, Y_test)
print('accuracy score:' , data_accuracy)

"""Checking with input"""

input_data= (17.99,10.38,122.8,1001,0.1184,0.2776,0.3001,0.1471,0.2419,0.07871,1.095,0.9053,8.589,153.4,0.006399,0.04904,0.05373,0.01587,0.03003,0.006193,25.38,17.33,184.6,2019,0.1622,0.6656,0.7119,0.2654,0.4601,0.1189)
input_data_as_nparrary= np.asarray(input_data)    ##changing the input data as np array

##as the model will expect 768 value, reshapping to make the model understand that its one value
reshape = input_data_as_nparrary.reshape(1,-1)

##prediction
prediction =model.predict(reshape)
print(prediction)

if (prediction[0] == 0):
    print ('The  type is Malignant')
else:
        print ('It is Benign')

"""I have done a full examination on a dataset related to breast cancer and build logistic regression model. While building the model I have to change the target data set from string type to integer value.

saving the trained model
"""

import pickle

filename = "trained_model.sav"
pickle.dump(model, open(filename, 'wb'))    ##wb stands for write binary

##loading the model
load_model = pickle.load(open('trained_model.sav', 'rb'))